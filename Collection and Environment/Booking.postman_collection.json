{
	"info": {
		"_postman_id": "5d03633e-b093-42fb-afa1-92f143587eda",
		"name": "Booking",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27187339"
	},
	"item": [
		{
			"name": "Create Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"id\", jsonData.bookingid)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(firstName)\r",
							"pm.environment.set(\"firstName\", firstName)\r",
							"\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(lastName)\r",
							"pm.environment.set(\"lastName\", lastName)\r",
							"\r",
							"var totalprice = pm.variables.replaceIn('{{$randomInt}}')\r",
							"console.log(totalprice)\r",
							"pm.environment.set(\"Total Price\", totalprice)\r",
							"\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"//const today1 = moment()\r",
							"//const today2 = moment()\r",
							"\r",
							"pm.environment.set(\"CheckIn\", today.add(5, 'day').format(\"YYYY-MM-DD\"))\r",
							"const today1 = moment()\r",
							"pm.environment.set(\"CheckOut\", today1.add(10, 'day').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"//console.log(today.add(5,'day').format(\"YYYY-MM-DD\"))\r",
							"//console.log(today1.add(5,'M').format(\"YYYY-MM-DD\"))\r",
							"//console.log(today2.add(5,'Y').format(\"YYYY-MM-DD\"))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstName}}\",\r\n\t\"lastname\" : \"{{lastName}}\",\r\n\t\"totalprice\" : {{Total Price}},\r\n\t\"depositpaid\" : true,\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{CheckIn}}\",\r\n    \t\"checkout\" : \"{{CheckOut}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"Breakfast\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/booking/",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code\r",
							"console.log(code)\r",
							"\r",
							"switch(code){\r",
							"    case 200:\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"        \r",
							"        var jsonData = pm.response.json()\r",
							"\r",
							"        pm.test(\"First Name Validation\", function(){\r",
							"        pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"firstName\"))\r",
							"        })\r",
							"\r",
							"        /*pm.test(\"First Name Validation\", function(){\r",
							"        pm.expect(jsonData.firstname).to.eql(pm.iterationData.get(\"firstName\"))\r",
							"        })*/\r",
							"\r",
							"        /*pm.test(\"Last Name Validation\", function(){\r",
							"        pm.expect(jsonData.lastname).to.equal(pm.iterationData.get(\"lastName\"))\r",
							"        })*/\r",
							"\r",
							"        pm.test(\"Last Name Validation\", function(){\r",
							"        pm.expect(jsonData.lastname).to.equal(pm.environment.get(\"lastName\"))\r",
							"        })\r",
							"\r",
							"        pm.test(\"Total Price Validation\", function()\r",
							"        {pm.expect(jsonData.totalprice).to.eql(parseInt(pm.environment.get(\"Total Price\")))})\r",
							"\r",
							"        pm.test(\"Deposit Paid Validation\", function(){\r",
							"        pm.expect(jsonData.depositpaid).to.eql(true)\r",
							"        })\r",
							"\r",
							"        pm.test(\"Check In Validation\", function(){\r",
							"        pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"CheckIn\"))\r",
							"        })\r",
							"\r",
							"        pm.test(\"Check Out Validation\", function(){\r",
							"        pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"CheckOut\"))\r",
							"        })\r",
							"\r",
							"        /*pm.test(\"Check out Validastion\", function(){\r",
							"        pm.expect(jsonData.bookingdates.checkout).to.eql(\"2019-01-01\")\r",
							"        })*/\r",
							"\r",
							"        pm.test(\"Additional Needs Validation\", function(){\r",
							"        pm.expect(jsonData.additionalneeds).to.eql(\"Breakfast\")\r",
							"        })\r",
							"    break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found\")\r",
							"        break;\r",
							"    case 500:\r",
							"        pm.test(\"Not Found\")\r",
							"        break;\r",
							"\r",
							"    default:\r",
							"    pm.test(\"Something went wrong!\")\r",
							"    break;\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/booking/{{id}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var tokenData = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"token\", tokenData.token)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/auth",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var FirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(FirstName)\r",
							"pm.environment.set(\"updatedfirstName\", FirstName)\r",
							"\r",
							"var LastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(LastName)\r",
							"pm.environment.set(\"updatedlastName\", LastName)\r",
							"\r",
							"var updatedtotalprice = pm.variables.replaceIn('{{$randomInt}}')\r",
							"console.log(updatedtotalprice)\r",
							"pm.environment.set(\"Updated Total Price\", updatedtotalprice)\r",
							"\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"pm.environment.set(\"updatedCheckIn\", today.add(3, 'day').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"const today1 = moment()\r",
							"pm.environment.set(\"updatedCheckOut\", today1.add(7, 'day').format(\"YYYY-MM-DD\"))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{updatedfirstName}}\",\r\n\t\"lastname\" : \"{{updatedlastName}}\",\r\n\t\"totalprice\" : {{Updated Total Price}},\r\n\t\"depositpaid\" : true,\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{updatedCheckIn}}\",\r\n    \t\"checkout\" : \"{{updatedCheckOut}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"Lunch\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/booking/{{id}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Updated Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code\r",
							"console.log(code)\r",
							"\r",
							"switch(code){\r",
							"    case 200:\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"        var jsonData = pm.response.json()\r",
							"\r",
							"        pm.test(\"First Name Validation\", function(){\r",
							"        pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"updatedfirstName\"))\r",
							"        })\r",
							"\r",
							"        pm.test(\"Last Name Validation\", function(){\r",
							"        pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"updatedlastName\"))\r",
							"        })\r",
							"\r",
							"        pm.test(\"Total Price Validation\", function(){pm.expect(jsonData.totalprice).to.eql(parseInt(pm.environment.get(\"Updated Total Price\")))})\r",
							"\r",
							"        pm.test(\"Deposit Paid Validation\", function(){\r",
							"        pm.expect(jsonData.depositpaid).to.eql(true)\r",
							"        })\r",
							"\r",
							"        pm.test(\"Check In Validation\", function(){\r",
							"        pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"updatedCheckIn\"))\r",
							"        })\r",
							"\r",
							"        pm.test(\"Check Out Validation\", function(){\r",
							"        pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"updatedCheckOut\"))\r",
							"        })\r",
							"\r",
							"        pm.test(\"Additional Needs Validation\", function(){\r",
							"        pm.expect(jsonData.additionalneeds).to.eql(\"Lunch\")\r",
							"        })\r",
							"    break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found\")\r",
							"    break;\r",
							"    case 500:\r",
							"        pm.test(\"Not Found\")\r",
							"    break;\r",
							"\r",
							"    default:\r",
							"        pm.test(\"Something went wrong!\")\r",
							"    break;\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/booking/{{id}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Partial Update Booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(firstName)\r",
							"pm.environment.set(\"partialfirstName\", firstName)\r",
							"\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(lastName)\r",
							"pm.environment.set(\"partiallastName\", lastName)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{partialfirstName}}\",\r\n    \"lastname\" : \"{{partiallastName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/booking/{{id}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseURL}}/booking/{{id}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}